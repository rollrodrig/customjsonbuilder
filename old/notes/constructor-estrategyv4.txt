### case keyValuePair(string)
{name:string}
. remove {}
name:string
. split on :
[name,string]
return {key:name, value:string, nested:false}




# case
{person:{age:number,city:string}}
. remove {}
person:{age:number,city:string}
. split on :
[person,{age:number,city:string}]
return [person,{age:number,city:string}]

# case
{person:[{age:number,city:string};4]}
.remove {}
person:[{age:number,city:string};4]
. split on :
["person", "[{age:number,city:string};4]"]
return ["person", "[{age:number,city:string};4]"]

###  divideOnCommas(string)
case 1
{person:string,age:number}
. remove {}
person:string,age:number
. divide in commas
["person:string","age:number"]
. loop ["person:string","age:number"]
    [0]. keyValuePair("person:string")
    return [person, string]
    [1]. keyValuePair("age:number")
    return [age,number]
. return  [person, string, age, number]

case 2
{person:{name:string,email:string},age:number}
. remove {}
person:{name:string,email:string},age:number
. divideOnCommas("person:{name:string,email:string},age:number")
    return 


### case keyValuePair(string)
{name:string}
keyValuePair(string) {
    // remove {}
    name:string
    // split on :
    arr = [name,string]
    key = arr[0]
    // arr[1] is Object?
        // clean array
    // arr[1] is Array?
    value = string
    return {key:arr[0], value:string, nested:false}
}

### proccess Object
{name:string, age:number}
processObject({...}) {
    // string
    {name:string,age:number}
    // remove {}
    name:string,age:number
    // split on ,
    arr = [name:string,person:{age:number,email:email}]
    // loop arr
        [0] "name:string"
            // split on :
            [name, string]
            // [0]
            key
            // [1] is primitive
            return { key:name, value:string, nested:false}

        [1] "person:{age:number,email:email}"
            // split on :
            [person,{age:number,email:email}]




}
